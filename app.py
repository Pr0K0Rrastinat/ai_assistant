import streamlit as st
from pathlib import Path
import re
from norm_rag import NormRAG
from read_docx import check_multi_norms_combined_with_llama
from log_feedback import log_feedback
from scripts.search_class_norms import search as search_table_norms

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BASE_DIR = Path(__file__).resolve().parent
RAG = NormRAG(base_dir=BASE_DIR, source_file="norms_checklist_v2.json")

st.set_page_config(page_title="AI –¥–ª—è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤", layout="wide")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ ===
def linkify_norm_refs(text):
    def replace(match):
        norm_id = match.group(0)
        url = f"?norm_id={norm_id}"
        norm = next((n for n in RAG.norms if n.get("id") == norm_id), None)
        tooltip = norm.get("text", "").replace('"', "'").replace("\n", " ") if norm else ""
        return f'<a href="{url}" title="{tooltip}"><b>{norm_id}</b></a>'
    return re.sub(r'\b\d{1,2}(?:\.\d{1,2}){1,4}\b', replace, text)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ—Ä–º—É ===
query_params = st.query_params
norm_id = query_params.get("norm_id")
if norm_id:
    norm = next((n for n in RAG.norms if n.get("id") == norm_id), None)
    st.title(f"üìÑ –ù–æ—Ä–º–∞ {norm_id}")
    if norm:
        st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫**: `{norm.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}`")
        st.markdown(f"**–¢–µ–∫—Å—Ç –Ω–æ—Ä–º—ã:**\n\n{norm.get('text')}")
    else:
        st.error("‚ùå –ù–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    st.markdown("[‚Üê –ù–∞–∑–∞–¥](./)")
    st.stop()

# === –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.title("üìê AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –Ω–æ—Ä–º–∞–º")

question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–∞–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ—Å—Ç–Ω–∏—Ü—É?')")
applies_to = st.text_input("–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", placeholder="–ª–µ—Å—Ç–Ω–∏—Ü–∞, –∫–æ—Ä–∏–¥–æ—Ä, –∫—É—Ö–Ω—è...")

if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
    st.session_state["feedback_logged"] = False

    if not question.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
    else:
        with st.spinner("üîé –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º..."):
            text_norms = RAG.query(question, top_k=20, applies_to=applies_to)
            table_norms = search_table_norms(question, top_k=10)  # —Ç–∞–±–ª–∏—á–Ω—ã–µ –Ω–æ—Ä–º—ã

        if not text_norms and not table_norms:
            st.error("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, –Ω–∏ –≤ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–∞—Ö.")
        else:
            progress_label = st.empty()
            progress_bar = st.progress(0.0)
            progress_label.text("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")

            answer = check_multi_norms_combined_with_llama(
                text_norms=text_norms,
                table_norms=table_norms,
                fact_text=question,
                progress_bar=progress_bar,
                progress_label=progress_label
            )

            progress_bar.empty()
            
    
            st.session_state["last_question"] = question
            st.session_state["last_answer"] = answer
            st.session_state["last_text_norms"] = text_norms
            st.session_state["last_table_norms"] = table_norms


# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ===
if "last_answer" in st.session_state and st.session_state["last_answer"]:
    answer = st.session_state["last_answer"]
    norms = st.session_state.get("last_norms", [])
    final_response = answer
    if "**üìå –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:**" in final_response:
        final_response = final_response.split("**üìå –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:**", 1)[-1].strip()
    st.success("‚úÖ –û—Ç–≤–µ—Ç:")
    st.markdown(linkify_norm_refs(final_response), unsafe_allow_html=True)

    with st.expander("üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã"):
        text_norms = st.session_state.get("last_text_norms", [])
        table_norms = st.session_state.get("last_table_norms", [])

        if text_norms:
            st.markdown("### üìò –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–æ—Ä–º—ã:")
            for norm in text_norms:
                norm_id = norm.get("id", "")
                norm_text = norm.get("text", "")
                safe_text = norm_text.replace('"', "'").replace("\n", " ")
                st.markdown(f"""
                <div title="{safe_text}">
                    üîπ <a href="?norm_id={norm_id}" target="_self"><b>{norm_id}</b></a> ‚Äî {norm_text}
                </div>
                """, unsafe_allow_html=True)

        if table_norms:
            st.markdown("### üìä –¢–∞–±–ª–∏—á–Ω—ã–µ –Ω–æ—Ä–º—ã:")
            for norm in table_norms:
                indicator = norm.get("indicator", "‚Äî")
                st.markdown(f"**‚óæ {indicator}**")
                values = norm.get("values", {})
                for cls, val in values.items():
                    st.markdown(f"- {cls}: {val}")


    st.markdown("ü§î –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–µ–Ω –æ—Ç–≤–µ—Ç?")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üëç –ü–æ–ª–µ–∑–Ω–æ", key="good_btn"):
            if not st.session_state.get("feedback_logged"):
                question = st.session_state.get("last_question", "")
                norm_ids = [n.get("id") for n in norms if n.get("id")]
                log_feedback(question, answer, norm_ids, 1)
                st.session_state["feedback_logged"] = True
                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")

    with col2:
        if st.button("üëé –ù–µ—Ç–æ—á–Ω–æ", key="bad_btn"):
            if not st.session_state.get("feedback_logged"):
                question = st.session_state.get("last_question", "")
                norm_ids = [n.get("id") for n in norms if n.get("id")]
                log_feedback(question, answer, norm_ids, 0)
                st.session_state["feedback_logged"] = True
                st.warning("–°–ø–∞—Å–∏–±–æ! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
