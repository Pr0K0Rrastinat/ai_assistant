from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import TfidfVectorizer
import pickle
import faiss
import json
from pathlib import Path

INPUT = Path("extracted/new_class_norms_merged.json")
INDEX = Path("index/class_norms.index")
META = Path("index/class_norms_meta.pkl")

from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import TfidfVectorizer  # (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
import pickle
import faiss
import json
from pathlib import Path
def guess_room_type(indicator, values_dict):
    text = indicator.lower() + " " + " ".join(values_dict.values()).lower()

    if any(word in text for word in ["–∫—É—Ö–Ω—è", "–ø–ª–∏—Ç–∞", "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∏—â–∏"]):
        return "–∫—É—Ö–Ω—è"
    if any(word in text for word in ["–¥—É—à", "–¥—É—à–µ–≤–∞—è", "—Å–∞–Ω—É–∑–µ–ª", "—Å—É—à–∫–∞", "—Ç—É–∞–ª–µ—Ç", "—É–º—ã–≤–∞–ª—å–Ω–∏–∫", "—É–Ω–∏—Ç–∞–∑"]):
        return "—Å–∞–Ω—É–∑–µ–ª"
    if any(word in text for word in ["–≥–∞—Ä–¥–µ—Ä–æ–±", "—à–∫–∞—Ñ", "–æ–¥–µ–∂–¥–∞", "—Ä–∞–∑–¥–µ–≤–∞–ª–∫–∞"]):
        return "–≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è"
    if any(word in text for word in ["–∫–æ–º–Ω–∞—Ç–∞", "–∂–∏–ª–∞—è", "—Å–ø–∞–ª—å–Ω—è", "–≥–æ—Å—Ç–∏–Ω–∞—è"]):
        return "–∂–∏–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞"
    if any(word in text for word in ["–±–∞–ª–∫–æ–Ω", "–ª–æ–¥–∂–∏—è"]):
        return "–±–∞–ª–∫–æ–Ω"
    return "–ø–æ–º–µ—â–µ–Ω–∏–µ"

def build_class_norms_index(input_json: Path):
    output_dir = Path("extracted/")
    with open(input_json, "r", encoding="utf-8") as f:
        data = json.load(f)

    model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")

    texts = []
    metadatas = []
    skipped = 0

    for item in data:
        indicator = item.get("indicator", "")
        values = item.get("values", {})
        domain = item.get("domain", "")
        source = item.get("source", "")
        full_id = item.get("full_id", "")

        if not indicator or not values:
            skipped += 1
            continue

        room_type = guess_room_type(indicator, values)

        combined = " ".join([
            guess_room_type(indicator, values),
            indicator,
            " ".join([f"{k} {v}" for k, v in values.items()]),
            domain,
            source,
            full_id
        ])


        texts.append(combined)
        metadatas.append(item)

    print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(metadatas)}")

    embeddings = model.encode(texts, convert_to_numpy=True)
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings)

    output_dir.mkdir(parents=True, exist_ok=True)
    index_path = output_dir / "class_norms_merged.index"
    meta_path = output_dir / "class_norms_merged.pkl"

    faiss.write_index(index, str(index_path))
    with open(meta_path, "wb") as f:
        pickle.dump(metadatas, f)

    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {index_path}")
    print(f"üß† –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {meta_path}")
    print(f"üîç –í—Å–µ–≥–æ –≤ –∏–Ω–¥–µ–∫—Å–µ: {len(metadatas)} –∑–∞–ø–∏—Å–µ–π")
# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
#build_class_norms_index(INPUT)
