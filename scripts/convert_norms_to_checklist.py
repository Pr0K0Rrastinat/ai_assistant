import json5
import json
import requests
import time
from pathlib import Path

def chunked(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def generate_checklist_prompt(norms):
    norm_texts = "\n".join([f"{i+1}. [{n['id']}] {n['text']}" for i, n in enumerate(norms)])
    return f"""
    –¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –ù–µ –ø–∏—à–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ù–µ –ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ —Å –Ω–æ—Ä–º–∞–º–∏.

    –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ—Ä–º—ã —É–∫–∞–∂–∏:
    - id
    - text
    - applies_to
    - condition
    - requirement
    - check
    - domain (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" –∏ —Ç.–ø.)

    –ü—Ä–∏–º–µ—Ä:
    [
    {{
        "id": "4.2.6",
        "applies_to": ["–ª–æ–¥–∂–∏—è", "–±–∞–ª–∫–æ–Ω"],
        "text": "4.2.6 –û–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ª–æ–¥–∂–∏–π...",
        "condition": "–∑–¥–∞–Ω–∏–µ ‚â• 3 —ç—Ç–∞–∂–µ–π",
        "requirement": "–º–∞—Ç–µ—Ä–∏–∞–ª = –Ω–µ–≥–æ—Ä—é—á–∏–π",
        "check": "–µ—Å–ª–∏ –ª–æ–¥–∂–∏—è –≤ –∑–¥–∞–Ω–∏–∏ ‚â• 3 —ç—Ç–∞–∂–µ–π, –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≥–æ—Ä—é—á–∏–º",
        "domain": "–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    }}
    ]

    –í–æ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤—ã:
    {norm_texts}
    """

def create_check_list_with_model(prompt, model_name="mistral"):
    response = requests.post("http://localhost:11434/api/generate", json={
        "model": model_name,
        "prompt": prompt,
        "stream": False
    })
    return response.json().get("response", "")

def clean_json_like_text(text):
    text = text.strip("` \n")
    json_start = text.find("[")
    if json_start == -1:
        json_start = text.find("{")
    if json_start == -1:
        return text
    return text[json_start:]

def convert_norms_to_checklist(norms, output_json: Path):

    if output_json.exists():
        with open(output_json, encoding="utf-8") as out:
            checklist = json.load(out)
        print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(checklist)} –Ω–æ—Ä–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞.")
    else:
        checklist = []

    existing_ids = {item.get("full_id") for item in checklist if "full_id" in item}
    print(f"üöÄ –í—Å–µ–≥–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(norms)} –Ω–æ—Ä–º")
    print(f"‚ñ∂Ô∏è –ü–µ—Ä–≤–∞—è –Ω–æ—Ä–º–∞: {norms[0].get('full_id', '???')}")

    output_json.parent.mkdir(parents=True, exist_ok=True)

    for i, chunk in enumerate(chunked(norms, 5), start=1):
        prompt = generate_checklist_prompt(chunk)
        raw_response = create_check_list_with_model(prompt)
    
        if not raw_response.strip() or "‚ùå" in raw_response or len(raw_response.strip()) < 20:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞–Ω–∫–µ {i}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫...")
            time.sleep(3)
            raw_response = create_check_list_with_model(prompt)

        time.sleep(1)

        try:
            cleaned = clean_json_like_text(raw_response)
            if not cleaned.strip().startswith("[") and not cleaned.strip().startswith("{"):
                print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–∞ —á–∞–Ω–∫–µ {i} –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ JSON. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                with open(f"debug_response_chunk_{i}.txt", "w", encoding="utf-8") as f:
                    f.write(raw_response)
                continue

            parsed = json5.loads(cleaned)
            
            enriched = []
            for j, item in enumerate(parsed if isinstance(parsed, list) else [parsed]):
                if j < len(chunk):
                    source = chunk[j].get("source", "")
                    item["source"] = source
                    item["full_id"] = f"{source}:{item['id']}" if "id" in item and source else ""
                enriched.append(item)

            new_items = [item for item in enriched if item.get("full_id") not in existing_ids]
            if not new_items:
                print(f"‚è≠Ô∏è –í—Å–µ {len(enriched)} –Ω–æ—Ä–º —É–∂–µ –µ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            checklist.extend(new_items)
            existing_ids.update(item["full_id"] for item in new_items)
            with open(output_json, "w", encoding="utf-8") as f:
                json.dump(checklist, f, ensure_ascii=False, indent=2)

            print(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ —á–∞–Ω–∫–∞ {i}. –í—Å–µ–≥–æ –Ω–æ—Ä–º: {len(checklist)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —á–∞–Ω–∫–∞ {i}: {e}")
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç:\n", raw_response[:800])
            continue

    print(f"\n‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∏–∑ {len(checklist)} –Ω–æ—Ä–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_json}")
