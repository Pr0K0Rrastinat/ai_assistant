import json5
import json
import requests
import time
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
input_path = BASE_DIR / "extracted" / "norms.json"
output_path = BASE_DIR / "extracted" / "norms_checklist.json"

def chunked(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def generate_checklist_prompt(norms):
    norm_texts = "\n".join([f"{i+1}. [{n['id']}] {n['text']}" for i, n in enumerate(norms)])
    return f"""
–¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ –≤–µ—Ä–Ω–∏ —Å–ª–æ–≤–∞—Ä—å —Å —Ç–∞–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏:
- id
- text
- applies_to
- condition
- requirement
- check

–ü—Ä–∏–º–µ—Ä:
- id: "4.2.6"
  applies_to: ["–ª–æ–¥–∂–∏—è", "–±–∞–ª–∫–æ–Ω"]
  text: "4.2.6 –û–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ª–æ–¥–∂–∏–π..."
  condition: "–∑–¥–∞–Ω–∏–µ ‚â• 3 —ç—Ç–∞–∂–µ–π"
  requirement: "–º–∞—Ç–µ—Ä–∏–∞–ª = –Ω–µ–≥–æ—Ä—é—á–∏–π"
  check: "–µ—Å–ª–∏ –ª–æ–¥–∂–∏—è –≤ –∑–¥–∞–Ω–∏–∏ ‚â• 3 —ç—Ç–∞–∂–µ–π, –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≥–æ—Ä—é—á–∏–º"

–í–æ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤—ã:
{norm_texts}

–í–µ—Ä–Ω–∏ JSON –∏–ª–∏ YAML –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
"""

def create_check_list_with_model(prompt, model_name="gemma3"):
    response = requests.post("http://localhost:11434/api/generate", json={
        "model": model_name,
        "prompt": prompt,
        "stream": False
    })
    return response.json().get("response", "")

def clean_json_like_text(text):
    # –£–±–∏—Ä–∞–µ–º ```json ``` –∏–ª–∏ Markdown-–ø–æ–¥–æ–±–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
    text = text.strip("` \n")

    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    json_start = text.find("[")
    if json_start == -1:
        json_start = text.find("{")
    if json_start == -1:
        return text  # fallback

    return text[json_start:]

def save_progress(safe_list, path):
    with open(path, "w", encoding="utf-8") as out:
        json.dump(safe_list, out, ensure_ascii=False, indent=2)

def main():
    with open(input_path, encoding="utf-8") as f:
        norms = json.load(f)

    if output_path.exists():
        with open(output_path, encoding="utf-8") as out:
            checklist = json.load(out)
        print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(checklist)} –Ω–æ—Ä–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞.")
    else:
        checklist = []

    output_path.parent.mkdir(parents=True, exist_ok=True)

    for i, chunk in enumerate(chunked(norms, 5), start=1):
        prompt = generate_checklist_prompt(chunk)
        raw_response = create_check_list_with_model(prompt)

        if not raw_response.strip() or "‚ùå" in raw_response or len(raw_response.strip()) < 20:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞–Ω–∫–µ {i}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫...")
            time.sleep(3)
            raw_response = create_check_list_with_model(prompt)

        time.sleep(1)

        try:
            cleaned = clean_json_like_text(raw_response)
            parsed = json5.loads(cleaned)

            if isinstance(parsed, list):
                checklist.extend(parsed)
            else:
                checklist.append(parsed)

            save_progress(checklist, output_path)
            print(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ —á–∞–Ω–∫–∞ {i}. –í—Å–µ–≥–æ –Ω–æ—Ä–º: {len(checklist)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —á–∞–Ω–∫–∞ {i}: {e}")
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç:\n", raw_response[:800])
            continue

    print(f"\n‚úÖ –ß–µ–∫–ª–∏—Å—Ç –∏–∑ {len(checklist)} –Ω–æ—Ä–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")

if __name__ == "__main__":
    main()
