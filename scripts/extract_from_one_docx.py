from docx import Document
import re
import json
from pathlib import Path

# === –£–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
INPUT_FILE = Path("./docs/–†–µ—à–µ–Ω–∏–µ –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–π XXVI —Å–µ—Å—Å–∏–∏ –º–∞—Å–ª–∏—Ö–∞—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ê–ª–º–∞—Ç—ã VIII —Å–æ–∑—ã–≤–∞ –æ—Ç 25 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞ ‚Ññ 194 –û–± —É.docx")
OUTPUT_FILE = Path("./docs/new_norms_general_parser7.json")

# === –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1", "4.1", "5.3.2.1")
NORM_PATTERN = re.compile(r'^\d+(\.\d+)*')

def extract_general_norms(file_path):
    doc = Document(file_path)
    blocks = []
    source = file_path.stem

    buffer = []
    for para in doc.paragraphs:
        text = para.text.strip()
        if not text:
            continue

        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID
        match = NORM_PATTERN.match(text)
        if match:
            if buffer:
                blocks.append(" ".join(buffer))
                buffer = []
        buffer.append(text)

    if buffer:
        blocks.append(" ".join(buffer))

    norms = []
    for block in blocks:
        match = NORM_PATTERN.match(block)
        if match:
            norm_id = match.group()
            norms.append({
                "id": norm_id,
                "text": block,
                "source": source,
                "full_id": f"{source}:{norm_id}"
            })

    return norms

# === –ó–∞–ø—É—Å–∫
norms = extract_general_norms(INPUT_FILE)
print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(norms)} –Ω–æ—Ä–º.")

with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
    json.dump(norms, f, ensure_ascii=False, indent=2)

print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {OUTPUT_FILE}")